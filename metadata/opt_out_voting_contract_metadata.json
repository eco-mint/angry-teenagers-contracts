{
  "name": "Angry Teenagers DAO OptOut vote",
  "version": "1.1.1",
  "description": "Angry Teenagers Opt out strategy.",
  "interfaces": [ "TZIP-016" ],
  "authors": [ "EcoMint LTD <www.angryteenagers.xyz>" ],
  "homepage": "https://www.angryteenagers.xyz",
  "views": [
    {
      "name": "get_historical_outcome_data",
      "pure": true,
      "description": "Get historical data per outcome id.\n        ",
      "implementations": [
        {
          "michelsonStorageView": {
            "parameter": { "prim": "nat" },
            "returnType": {
              "prim": "pair",
              "args": [
                {
                  "prim": "pair",
                  "args": [
                    { "prim": "nat", "annots": [ "%phase_1_vote_objection" ] },
                    {
                      "prim": "pair",
                      "args": [
                        { "prim": "nat", "annots": [ "%phase_1_voting_start_block" ] },
                        {
                          "prim": "pair",
                          "args": [
                            { "prim": "nat", "annots": [ "%phase_1_voting_end_block" ] },
                            {
                              "prim": "pair",
                              "args": [
                                { "prim": "nat", "annots": [ "%vote_id" ] },
                                {
                                  "prim": "pair",
                                  "args": [
                                    { "prim": "nat", "annots": [ "%total_voters" ] },
                                    {
                                      "prim": "pair",
                                      "args": [
                                        { "prim": "nat", "annots": [ "%phase_1_objection_threshold" ] },
                                        { "prim": "pair", "args": [ { "prim": "bool", "annots": [ "%phase_2_needed" ] }, { "prim": "nat", "annots": [ "%phase_2_vote_id" ] } ] }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ],
                  "annots": [ "%poll_data" ]
                },
                { "prim": "nat", "annots": [ "%poll_outcome" ] }
              ]
            },
            "code": [
              { "prim": "UNPAIR" },
              { "prim": "SWAP" },
              { "prim": "CAR" },
              { "prim": "GET", "args": [ { "int": "6" } ] },
              { "prim": "SWAP" },
              { "prim": "GET" },
              {
                "prim": "IF_NONE",
                "args": [ [ { "prim": "PUSH", "args": [ { "prim": "string" }, { "string": "ANGRY_TEENAGERS_DAO_INVALID_OUTCOME_ID" } ] }, { "prim": "FAILWITH" } ], [] ]
              }
            ]
          }
        }
      ]
    },
    {
      "name": "get_number_of_historical_outcomes",
      "pure": true,
      "description": "Get how many historical outcome are stored in the DAO.\n        ",
      "implementations": [ { "michelsonStorageView": { "returnType": { "prim": "nat" }, "code": [ { "prim": "GET", "args": [ { "int": "7" } ] } ] } } ]
    },
    {
      "name": "get_contract_state",
      "pure": true,
      "description": "Get contract state\n        ",
      "implementations": [ { "michelsonStorageView": { "returnType": { "prim": "nat" }, "code": [ { "prim": "GET", "args": [ { "int": "8" } ] } ] } } ]
    },
    {
      "name": "get_current_poll_data",
      "pure": true,
      "description": "Get all current poll data if it exists.\n        ",
      "implementations": [
        {
          "michelsonStorageView": {
            "returnType": {
              "prim": "pair",
              "args": [
                { "prim": "nat", "annots": [ "%phase_1_vote_objection" ] },
                {
                  "prim": "pair",
                  "args": [
                    { "prim": "nat", "annots": [ "%phase_1_voting_start_block" ] },
                    {
                      "prim": "pair",
                      "args": [
                        { "prim": "nat", "annots": [ "%phase_1_voting_end_block" ] },
                        {
                          "prim": "pair",
                          "args": [
                            { "prim": "nat", "annots": [ "%vote_id" ] },
                            {
                              "prim": "pair",
                              "args": [
                                { "prim": "nat", "annots": [ "%total_voters" ] },
                                {
                                  "prim": "pair",
                                  "args": [
                                    { "prim": "nat", "annots": [ "%phase_1_objection_threshold" ] },
                                    { "prim": "pair", "args": [ { "prim": "bool", "annots": [ "%phase_2_needed" ] }, { "prim": "nat", "annots": [ "%phase_2_vote_id" ] } ] }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            "code": [
              { "prim": "DUP" },
              { "prim": "GET", "args": [ { "int": "3" } ] },
              { "prim": "GET", "args": [ { "int": "4" } ] },
              {
                "prim": "IF_NONE",
                "args": [
                  [ { "prim": "PUSH", "args": [ { "prim": "string" }, { "string": "ANGRY_TEENAGERS_DAO_NO_VOTE_OPEN" } ] }, { "prim": "FAILWITH" } ], [ { "prim": "DROP" } ]
                ]
              },
              { "prim": "GET", "args": [ { "int": "3" } ] },
              { "prim": "GET", "args": [ { "int": "4" } ] },
              { "prim": "IF_NONE", "args": [ [ { "prim": "PUSH", "args": [ { "prim": "int" }, { "int": "526" } ] }, { "prim": "FAILWITH" } ], [] ] }
            ]
          }
        }
      ]
    },
    {
      "name": "get_voter_history",
      "pure": true,
      "description": "Retrieve voters information per vote.\n        ",
      "implementations": [
        {
          "michelsonStorageView": {
            "parameter": { "prim": "pair", "args": [ { "prim": "address", "annots": [ "%address" ] }, { "prim": "nat", "annots": [ "%vote_id" ] } ] },
            "returnType": {
              "prim": "pair",
              "args": [
                { "prim": "nat", "annots": [ "%vote_value" ] },
                { "prim": "pair", "args": [ { "prim": "nat", "annots": [ "%level" ] }, { "prim": "nat", "annots": [ "%votes" ] } ] }
              ]
            },
            "code": [
              { "prim": "UNPAIR" },
              { "prim": "SWAP" },
              { "prim": "GET", "args": [ { "int": "3" } ] },
              { "prim": "CAR" },
              { "prim": "SWAP" },
              { "prim": "GET" },
              {
                "prim": "IF_NONE",
                "args": [ [ { "prim": "PUSH", "args": [ { "prim": "string" }, { "string": "ANGRY_TEENAGERS_DAO_NO_VOTER_INFO" } ] }, { "prim": "FAILWITH" } ], [] ]
              }
            ]
          }
        }
      ]
    }
  ]
}